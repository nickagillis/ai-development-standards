name: 📊 Automatic Community Wisdom Logging

# FIXED: Reduced trigger frequency to prevent email spam
# BEFORE: Triggered on every push to main (10+ rapid commits = 10+ emails)
# AFTER: Only weekly schedule + manual trigger for controlled runs

on:
  workflow_dispatch:  # Manual trigger only
  schedule:
    - cron: '0 12 * * 0'  # Weekly pattern analysis only

jobs:
  capture-patterns:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for pattern analysis
        
    - name: 📊 Analyze development patterns
      id: analyze
      run: |
        echo "Analyzing repository patterns automatically..."
        
        # Create logs directory (safely)
        mkdir -p logs/auto-captured || true
        
        # Capture basic repository metrics (with error handling)
        TOTAL_FILES=$(find . -type f -name "*.md" -o -name "*.js" -o -name "*.py" -o -name "*.yml" 2>/dev/null | wc -l || echo "0")
        TOTAL_COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "0")
        CONTRIBUTORS=$(git log --format='%ae' 2>/dev/null | sort -u | wc -l || echo "0")
        LAST_WEEK_COMMITS=$(git log --since="1 week ago" --oneline 2>/dev/null | wc -l || echo "0")
        
        # Check for crisis patterns (recent emergency branches)
        CRISIS_BRANCHES=$(git branch -r 2>/dev/null | grep -c "crisis/" || echo "0")
        RECENT_CRISIS=$(git log --since="1 week ago" --grep="CRISIS\|crisis\|emergency\|EMERGENCY" --oneline 2>/dev/null | wc -l || echo "0")
        
        # Check file size compliance (with safe defaults)
        OVERSIZED_FILES=$(find . -name "*.md" -exec wc -l {} \; 2>/dev/null | awk '$1 > 500 {print $2}' | wc -l || echo "0")
        OVERSIZED_SCRIPTS=$(find . -name "*.js" -o -name "*.sh" -exec wc -l {} \; 2>/dev/null | awk '$1 > 75 {print $2}' | wc -l || echo "0")
        
        # Create automatic pattern log (with proper error handling)
        cat > logs/auto-captured/weekly-patterns.json << EOF || true
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "analysis_type": "automatic_weekly_capture",
  "repository_health": {
    "total_files": $TOTAL_FILES,
    "total_commits": $TOTAL_COMMITS,
    "contributors": $CONTRIBUTORS,
    "recent_activity": $LAST_WEEK_COMMITS,
    "file_size_compliance": {
      "oversized_docs": $OVERSIZED_FILES,
      "oversized_scripts": $OVERSIZED_SCRIPTS,
      "compliance_score": $((100 - OVERSIZED_FILES - OVERSIZED_SCRIPTS))
    }
  },
  "crisis_indicators": {
    "crisis_branches_total": $CRISIS_BRANCHES,
    "recent_crisis_activity": $RECENT_CRISIS,
    "emergency_response_active": $([ $RECENT_CRISIS -gt 0 ] && echo "true" || echo "false")
  },
  "patterns_detected": [],
  "auto_generated": true,
  "capture_method": "github_actions_weekly"
}
EOF
        
        echo "patterns_captured=true" >> $GITHUB_OUTPUT
        echo "compliance_score=$((100 - OVERSIZED_FILES - OVERSIZED_SCRIPTS))" >> $GITHUB_OUTPUT
        
    - name: 🔍 Detect specific patterns
      if: steps.analyze.outputs.patterns_captured == 'true'
      run: |
        echo "Detecting specific development patterns..."
        
        # Check for modularization patterns (with safe handling)
        MODULAR_DOCS=$(find docs/ -name "*-*.md" 2>/dev/null | wc -l || echo "0")
        MODULAR_SCRIPTS=$(find scripts/ -name "utils" -type d 2>/dev/null | wc -l || echo "0")
        
        # Check for AI integration patterns
        AI_PROMPTS=$(find . -name "*prompt*" -o -name "*ai-*" 2>/dev/null | wc -l || echo "0")
        CLAUDE_INTEGRATION=$(grep -r "Claude Desktop\|AI Development Standards" . --include="*.md" 2>/dev/null | wc -l || echo "0")
        
        # Update patterns (with error handling)
        if command -v jq &> /dev/null; then
          jq --arg modular_docs "$MODULAR_DOCS" \
             --arg modular_scripts "$MODULAR_SCRIPTS" \
             --arg ai_prompts "$AI_PROMPTS" \
             --arg claude_integration "$CLAUDE_INTEGRATION" \
             '.patterns_detected = [
               {
                 "type": "modular_architecture",
                 "docs_modularized": ($modular_docs | tonumber),
                 "scripts_modularized": ($modular_scripts | tonumber),
                 "strength": (if (($modular_docs | tonumber) + ($modular_scripts | tonumber)) > 5 then "high" else "medium" end)
               },
               {
                 "type": "ai_integration", 
                 "prompt_files": ($ai_prompts | tonumber),
                 "integration_references": ($claude_integration | tonumber),
                 "strength": (if ($claude_integration | tonumber) > 10 then "high" else "medium" end)
               }
             ]' logs/auto-captured/weekly-patterns.json > temp.json && mv temp.json logs/auto-captured/weekly-patterns.json
        else
          echo "jq not available - patterns detected but not processed"
        fi
        
    - name: 📈 Update community patterns
      run: |
        echo "Updating community patterns database..."
        
        # If community-patterns.json exists, append new auto-generated pattern (safely)
        if [ -f community-patterns.json ] && command -v jq &> /dev/null; then
          # Create auto-generated pattern from current analysis
          PATTERN_DATE=$(date +%Y%m%d)
          AUTO_PATTERN_JSON=$(cat << EOF
{
  "pattern_id": "auto-generated-${PATTERN_DATE}",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "session_type": "automatic_capture",
  "category": "repository-health",
  "pattern": {
    "name": "Automated Repository Health Check",
    "description": "Weekly automatic capture of development patterns",
    "context": "Regular monitoring of repository compliance and patterns"
  },
  "metrics": $(cat logs/auto-captured/weekly-patterns.json | jq '.repository_health' 2>/dev/null || echo "{}"),
  "auto_generated": true,
  "community_value": {
    "monitoring": "continuous",
    "trend_analysis": "enabled"
  }
}
EOF
          )
          
          # Add to existing patterns (if valid JSON)
          if jq empty community-patterns.json 2>/dev/null; then
            echo "$AUTO_PATTERN_JSON" | jq -s '. as $new | $new[0] as $pattern | input + [$pattern]' community-patterns.json > temp-patterns.json 2>/dev/null || true
            if [ -f temp-patterns.json ]; then
              mv temp-patterns.json community-patterns.json
            fi
          fi
        else
          echo "Community patterns update skipped - jq not available or file missing"
        fi
        
    - name: 💾 Commit automatic logs
      run: |
        git config user.name "GitHub Actions - Auto Logger"
        git config user.email "actions@github.com"
        
        git add logs/auto-captured/ community-patterns.json 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "No new patterns to commit"
        else
          git commit -m "📊 Weekly automatic pattern capture - $(date -u +%Y-%m-%d)
          
          Auto-generated repository health analysis:
          - Compliance Score: ${{ steps.analyze.outputs.compliance_score }}/100
          - Pattern detection and community wisdom updates
          - Weekly development metrics captured
          
          Generated by GitHub Actions - scheduled weekly run" 2>/dev/null || echo "Commit failed - continuing"
          git push 2>/dev/null || echo "Push failed - continuing"
        fi
